@0
MOV UP ACC # Moves the first value into ACC

0S-: JGZ CS- # ZERO STATE
MOV 0 RIGHT # Keeps outputting 0 and getting next IN.1 value..
MOV UP ACC # .. until the IN.1 value changes to a 1,..
JMP 0S- # .. when it changes to 1 jump to CHANGE STATE

CS-: MOV 1 RIGHT # CHANGE STATE, simply outputs a 1..
MOV UP ACC # .. then gets next IN.1 value

1S-: JEZ 0S- # ONE STATE
MOV 0 RIGHT # Keeps outputting 0 and getting next IN.1 value..
MOV UP ACC # .. until the value changes back to 0,..
JMP 1S- # .. on change, jumps back to ZERO STATE

@1
MOV UP ACC # Moves the first IN.2 value into ACC

0S-: JGZ CS- # ZERO STATE
MOV LEFT RIGHT # While IN.2 value isn't changing, outputs..
MOV UP ACC # .. what was recieved from NODE 0 (left)..
JMP 0S- # ..On IN.2 value changing to 1, jumps to CHANGE STATE
# (^ when IN.2 doesn't change, output results from IN.1)
CS-: MOV 2 RIGHT # CHANGE STATE
MOV LEFT NIL # When IN.2 changes to 1, moves 2 right and..
MOV UP ACC # .. and discards from left, then gets next IN.2
# (^ when IN.2 DOES change, discard from left as IN.1 WON'T)
1S-: JEZ 0S- # ONE STATE
MOV LEFT RIGHT # Takes value from left and outputs it, until.. 
MOV UP ACC # .. IN.2 changes back to 0, then jumps back to..
JMP 1S- # .. ZERO STATE where everything continues

@2
MOV UP ACC # Moves the first IN.3 value into ACC
0S-: JGZ CS- # ZERO STATE
MOV LEFT DOWN # While IN.3 remains a 0, move the values from..
MOV RIGHT DOWN # .. Left and Right and move them both down..
MOV UP ACC # .. and then get next IN.3 value and repeat
JMP 0S-
CS-: MOV LEFT NIL # CHANGE STATE, When IN.3 changes, discard..
MOV RIGHT DOWN # .. from left (guarenteed 0), move right..
MOV 3 DOWN # .. down(guarenteed 0), and move 3 down and then..
MOV UP ACC # .. move next value of IN.3 into ACC
1S-:  JEZ 0S- # ONE STATE
MOV LEFT DOWN # while IN.3 remains a 1, move left and right..
MOV RIGHT DOWN # .. downwards and get next value of IN.3..
MOV UP ACC # .. and move that into the ACC
JMP 1S-

@3
MOV UP ACC # This whole node is the same as node 0..
# .. except it outputs to the left, takes in from IN.4..
0S-: JGZ CS- # and outputs a 4 when changing instead of a 1
MOV 0 LEFT
MOV UP ACC
JMP 0S-

CS-: MOV 4 LEFT
MOV UP ACC

1S-: JEZ 0S-
MOV 0 LEFT
MOV UP ACC
JMP 1S-

@4


@5


@6
MOV UP ACC
ADD UP # Takes 2 value from Up and adds them..
MOV ACC DOWN # .. then moves the result downwards
# This node requires 2 numbers to add to proceed, and that's..
# .. why NODE 2 always moves 2 values down. when IN.3 isn't..
# .. changing to a 1, it doesn't check itself which of the..
# .. others have changed, and pushes all to this node.
# In NODE 3's CHANGE STATE, both the inputs from left and..
# .. right and going to be 0, but still 2 items need to be..
# .. sent downwards for this program, so one of the inputs..
# .. is discarded (as it's 0) and the other is sent down..
# .. to prevent errors.
# Addition is the quickest way to determine which IN value..
# .. changed in each cycle
@7


@8


@9
MOV UP DOWN # Moves the value calculated in NODE 6 to OUT

@10
